<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{mso-style-link:"Comment Text Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	font-size:9.0pt;
	font-family:"Calibri","sans-serif";
	color:#4F81BD;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoCommentSubject, li.MsoCommentSubject, div.MsoCommentSubject
	{mso-style-link:"Comment Subject Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	font-size:10.0pt;
	font-family:"Calibri","sans-serif";
	font-weight:bold;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.CommentTextChar
	{mso-style-name:"Comment Text Char";
	mso-style-link:"Comment Text";}
span.CommentSubjectChar
	{mso-style-name:"Comment Subject Char";
	mso-style-link:"Comment Subject";
	font-weight:bold;}
span.apple-converted-space
	{mso-style-name:apple-converted-space;}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<p class=MsoNormal>Saturation Monitor (Satmon)</p>

<p class=MsoNormal>G.Rice 2/10/2012</p>

<p class=MsoNormal>Last Updated 4/23/2012</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Introduction</h1>

<p class=MsoNormal>In a nutshell, the Saturation Monitor is a bundle of python
code for estimating the saturation state of the receiver of a Reson 7k series
multibeam sonar.  The concept is based on work contained in Sam Greenaway’s
Master Thesis from the University of New Hampshire in 2010 (see <a
href="http://gradworks.umi.com/14/89/1489946.html">http://gradworks.umi.com/14/89/1489946.html</a>). 
This tool is meant to be used real time to assist sonar operators in collecting
reasonable quality backscatter without sacrificing bottom detection
reliability.  Because the Reson 7k multibeams have a limited range over which
they can sense an incoming signal it is possible to operate them out of their
linear range, which is to say the recorded magnitude is no longer directly
proportional to the sound pressure level on the receiver.  While saturation can
affect bathymetry quality as well, the primary purpose of this tool is to help
with backscatter acquisition.  By using the saturation monitor the system can
be operated in the linear range, increasing the likelihood of collecting
quality backscatter.</p>

<h1>How it works</h1>

<p class=MsoNormal>Gain is applied to the received signal as a combination of
the fixed gain and the time varying gain.  System limitations dictate the total
gain applied to the received signal which is somewhere between 0 and 83 dB. 
For every total gain value in this range there is a value where the system
starts to become nonlinear, but it changes over this gain range.  If the
relationship between the applied gain and the saturation value is known, the
saturation state of the multibeam can be estimated from real time information. 
Satmon subscribes to and receives the 7006 (bathymetry) and 7000 (sonar
settings) Reson records over the network during survey, and calculates the
total gain applied to each sounding.  Since the 7006 record also contains the
backscatter magnitude at the bottom detection, all the information is available
to compare the system state during survey to the estimated saturated state. 
Figure 1 shows how the Saturation Monitor displays this information.</p>

<p class=MsoNormal align=center style='text-align:center;page-break-after:avoid'><img
border=0 width=304 height=296 id="Picture 5"
src="Saturation%20Monitor%20V1.0_files/image001.jpg"> <img border=0 width=304
height=296 src="Saturation%20Monitor%20V1.0_files/image002.jpg"></p>

<p class=MsoCaption align=center style='text-align:center'>Figure 1 <span style='color:windowtext'>(left) Each beam (blue points) as a function of its total applied
gain and received magnitude relative to the estimate of the saturated state
(red line). (right) Each beam with its percentage of the saturation in dB.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The left plot in figure 1 shows the received magnitude for
each beam as a function of the gain applied to that bottom detection as blue
points.  The red line represents the provided curve for the saturation point as
a function of total applied gain.  Saturation is unlikely if the blue dots are
kept away from the red line.  </p>

<p class=MsoNormal>The plot on the right of figure 1 is the default display. 
It shows the percent of the saturation value for each beam so the sonar
operator can tell which part of the swath is being saturated.  The vertical
axis is in dB, so vertical changes in this plot are proportional to gain or
power settings.</p>

<h1>The Configuration File</h1>

<p class=MsoNormal>The Saturation Monitor uses a configuration file to know how
it should operate.  Edits should be made to provide the correct Reson machine
IP address or sonar type.  This file can be found in the Satmon directory in …Pydro\Lib\site-packages\HSTP\Satmon
under the name “satconfig.txt.”  This file looks something like this:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'># satconfig.txt
instructions: A proper entry starts with the property and is </span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'># followed by a
colon.  Only the second field in each line is read so comments</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'># can follow the
property value or the '#' at the beginning of a line.</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>ownip: 127.0.0.1
#ipaddress of the machine running satmon. </span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'># Reson machine
network information</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>ipaddress:
127.0.0.1 # ipaddress of the Reson machine.</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>portaddress: 7777 #
Port to connect to the Reson machine.</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>sonartype: 7125 #
Reson sonar type</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'># Other stuff</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>calfile400kHz: 2806/400khz/201201201731_400khz.npy</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>calfile200kHz:
201203201746_cal.npy</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Times New Roman","serif"'>mode: calibration</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As stated in the file, lines starting with a “#” are not
read, so these can be used for comments.  Lines with a particular keyword are
used to store properties, and the order by line does not matter.  Each of these
different keywords should be self explanatory.  One property worth noting is
the “mode.”  The mode was added to allow for some flexibility in how the
Saturation Monitor functions.  If this line is omitted or changed the
“calibration” menu in the Saturation Monitor will not be displayed, which is
probably preferable in most cases.  If a specific file is desired for the
calibration curve it can also be changed manually, and these files can be in
subdirectories as shown.  Satmon needs to be restarted for changes to take
effect.  It is also work mentioning is the “ownip” line.  This was an
afterthought when the saturation monitor sometimes used the ipaddress of the
wrong network adaptor to send to the Reson machine.  This line is only needed
if the wrong ipaddress (probably for the POSMV network) is showing up on the
Reson machine in the bite screen on the 7kcenter tab.</p>

<p class=MsoNormal>&nbsp;</p>

<h1>General operation</h1>

<p class=MsoNormal>The Saturation Monitor is distributed with Pydro, but can
operate independently if Python and the required modules are installed.  If
Pydro is installed, start the Saturation Monitor by selecting Start&gt;All
Programs&gt;Pydro&gt;Contributions&gt;Satmon.  NOAA field units have Pydro
installed on the acquisition (Hypack) computer for Velocipy access. </p>

<p class=MsoNormal>To properly operate the Saturation Monitor, the saturation
estimate curve belonging to the particular system in use must be available. 
See <i>Estimating the Saturation Curve</i> for further information.  If the
Saturation Monitor is to be used during survey (as opposed to reviewing a file
later) the IP address of the Reson Machine must be set correctly in the
satconf.txt file.  The “port” setting should not need to be changed, but if
using a Reson 7111 the “sonartype” should be adjusted.</p>

<p class=MsoNormal> Once the satconfig.txt file is setup correctly, start
Satmon.  Under the Source menu select where the Reson data packets for
assessing saturation should come from, as in either a file or from the network. 
If reviewing a file (s7k file only at this point) it may take a moment (or two,
or three…) for the file to load.  Reviewing a file in postprocessing for
saturation is useful if the line is behaving strangely relative to other
lines.  The network option is to allow for real time monitoring.  Press the
start button at the bottom to begin monitoring once the source has been
selected.</p>

<p class=MsoNormal align=center style='text-align:center;page-break-after:avoid'>&nbsp;</p>

<p class=MsoNormal align=center style='text-align:center;page-break-after:avoid'><img
border=0 width=338 height=329 id="Picture 2"
src="Saturation%20Monitor%20V1.0_files/image003.jpg"></p>

<p class=MsoCaption align=center style='text-align:center'>Figure 2</p>

<p class=MsoNormal>Under the plot menu there are two options for plot type, and
either can be chosen at any time but the display will not update until the next
ping is read.  For both plots the general idea is to keep the data below the
red line (saturation estimate).  For the percentage plot, if the near nadir
values are becoming saturated the power is probably too high.  The outer beams
can be made higher by changing the absorption and spreading (thereby increasing
the tvg), but check with your operations officer and chief survey tech for
their preferred mode of operation.  Balancing the Saturation Monitor display
with the bottom detection quality in the Reson display should optimize good
bathymetry with reasonable backscatter. </p>

<p class=MsoNormal>&nbsp;</p>

<h1>Estimating the Saturation Curve</h1>

<p class=MsoNormal>This is the most complicated and important part of operating
the Saturation Monitor.  This should only be attempted by an experienced user,
and even then only under the direction of the operations officer or chief
survey tech.  This should be conducted yearly as part of the HSRR process or
when a multibeam is changed out for a different one.  To perform this process
the “mode” value in the satconf.txt file must be set to “calibration” to show
the Calibration menu.  The steps are broken down into different option in the
calibration menu and are as follows: </p>

<p class=MsoNormal align=center style='text-align:center;page-break-after:avoid'><img
border=0 width=179 height=93 id="Picture 16"
src="Saturation%20Monitor%20V1.0_files/image004.jpg"></p>

<p class=MsoCaption align=center style='text-align:center'>Figure 3</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><b>Collect Data</b>:  This step must be performed on the same
network as the sonar, and the satconf.txt file must contain the appropriate
information to contact the sonar (ipaddress, sonartype).  The boat should be in
shallow water and stationary relative to the bottom, as in tied up at a pier. 
First, turn the multibeam on and adjust the range scale so that the seafloor is
in the cone part of the Reson display, then select Calibration&gt;Collect
Data.  The program will take the sonar through a series of power and gain
settings and collect an s7k file containing the information needed to determine
an estimate of the saturation curve.  This file will be stored in the Satmon
directory and named with the time stamp that it was recorded.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><b>Process Data</b>:  This step does not require that you are on
the boat, but does require that you select the file from the previous step. 
This step extracts the information from the selected file, and is completed
when the time elapsed for extraction is completed.  This process takes several
minutes (more than 5, less than 20) so don’t plan on doing this quickly.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><b>Selection of Curve</b>:  This step plots the information
extracted in the Process Data step, and allows the user to remove the saturated
data with a simple lasso tool.  Several similar plots are created representing
some (every fourth) of the different range bins.  Data is saturated when it
does not plot inline with other data, as shown with the data inside the red
line in figure 4.  Over removal of points makes the resulting curve more
conservative and more likely to conflict with getting good bottom detections. 
Not removing saturated points makes it possible the system could be saturated
even when bellow the red line in the real time display.</p>

<p class=MsoNormal align=center style='margin-left:.5in;text-align:center'><img
border=0 width=477 height=368 id="Picture 3"
src="Saturation%20Monitor%20V1.0_files/image005.jpg"></p>

<p class=MsoCaption align=center style='text-align:center'>Figure 4 <span style='color:windowtext'>The plots created in the Selection of Curve step.  Use the
curser as a lasso to remove the data that does not lineup.  </span></p>

<p class=MsoNormal style='margin-left:.5in'>The general logic for how point
removal from this step is used and a few tips:</p>

<p class=MsoListParagraphCxSpFirst style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Data from plots where nothing is removed are ignored.  If there
is a really bad plot (no trends or lots of odd points) just close the plot. 
Only remove points from good plots, like figure 4.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If data is removed from the middle of a line (like the blue line
in figure 4), there is no effect on the end result.  The right hand most point
is used from line color, so all points to the right must be removed for point
removal to be effective.  This also means that if it is difficult to get to
points because they are plotted on top of each other, you don’t have to worry
about removing the point in the middle of a line; it is more important to get
to that point at the end of the line that is plotted under or over another
point.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Make the plot full screen to see clearly.</p>

<p class=MsoListParagraphCxSpMiddle style='margin-left:1.0in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Use the zoom button.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><b>Inspect Curve:</b>  This step shows the created curve from the
steps above and allows for the removal of “bad” points.  These points are
deleted and the curve is a function of the remaining points.  This was added to
deal with points that clearly do not belong to the general trend, but should
not be over used.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><b>Compare Curves</b>:  This step is not required, but is
provided to allow for future comparisons between curves as they change.  By selecting
a past curve (saved as a *.npy file in the Satmon directory) the change in
curve change can be inspected for general interest.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><b>Finalize Curve</b>: This step will save the created curve to a
*.npy file, with the same name as the *.s7k file that it came from.  Reusing the
calibration file name is to help provide a link back to which data was used to
create which file.  This step also changes the name in the satconfig.txt file
to use the curve just created.</p>

<p class=MsoNormal>&nbsp;</p>

<h1>Troubleshooting</h1>

<p class=MsoNormal>This section will likely continue to grow, but here are a
few tips for now:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Keep an eye on the output in the second screen.  There can be
useful output there, including errors.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>If the wrong IP address is showing up on the Reson machine in the
Bite Screen under the 7kcenter tab, add and entry to your satconfig.txt for
ownip (see the satconfig.txt section above).  Sometimes the ipaddress of the
wrong network adaptor is sent to the Reson machine</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>You can reset the connection on the Reson machine (a connection
that hasn’t been dropped) by going to General &gt; ResetUDP.  This tells the
Reson machine to remove any current connections to the Satmon ipaddress and
port.</p>

<h1>General Structure</h1>

<p class=MsoNormal>The Saturation Monitor is composed of several different
modules.  While how they work together may not be interesting to all users,
some of these modules can be used for other purposes that might be of interest.</p>

<p class=MsoNormal> <img width=624 height=412
src="Saturation%20Monitor%20V1.0_files/image006.gif"></p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>prr – The prr module was designed to handle individual packets
from a particular s7k file.  In the general use case the module is used just to
decode packets as they come over the network.  Prr will continue to be
developed for other uses associated with extracting data contained in s7k
files.  This module is located separately from the rest of the Satmon modules
in the Lib/site-packages/HSTP/Pydro directory since it is more general purpose.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>sevenpy – Originally written to send commands to the 7k center
over the network, sevenpy has an executable (main) section for running the
calibration procedure.  This part of the code was transferred into a Satmon
method, so only the com7P class is used within Satmon.  The com7P object is a
connection to a particular 7k center on the network, and has a simple method
for sending commands to the identified system.  It will also catch UDP traffic
and TCP traffic coming from the 7k center, but these methods are designed for
particular applications (UDP goes to a file, TCP is buffered for use by another
program).</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Find7Pcompression – This module will continue to develop in
support of the automation of receiver nonlinearity curve extraction.  Currently
this process is very slow and requires user interaction, but the goal is to
make this a more objective process.  This module is formulated to handle a
single file as a dataset for calibration of a particular Reson 7k multibeam. 
First, all bottom detections are binned by range, and the bin with the most
detections is assumed to be the best estimate of the bottom within each beam. 
Beams at the same range will experience saturation together, and so are grouped
into sectors.  Once a dataset is extracted from the file, the maximum magnitude
within the snippet record for each sector and for each power and gain
combination is stored in an array.   A set of these arrays are selected for
plotting where the user selects the samples that have reached saturation.  The
minimum magnitude for that gain setting is saved as the representative point of
the beginning of saturation.  The curve is saved to a numpy array with the same
name as the file from whence the data was extracted.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Resontvg – The reson tvg curve was provided by Reson to UNH under
a non-disclosure agreement, but it was agreed it could be provided within this
application in a compiled form.  Thus the source code for this module is not
available.  Resontvg has two methods, one that provides the reson tvg curve
given sonar settings, and another that provides the gain applied to a series of
ranges given the sonar settings.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>Satmon – This module is comprised of two classes, one that
handles the graphical user interface (GUI) for Satmon, and a second class that
acts as the I/O layer between catching data and satmon.  The GUI is primarily written
in wxpython, but the graphing panel uses the matplotlib api.  The I/O module
has two modes, one for reading from files using prr and another for working
sevenpy and prr to get data from the 7kcenter real time.</p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
